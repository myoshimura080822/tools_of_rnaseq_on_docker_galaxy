<tool id="destiny_Wrapper" name="destiny_Wrapper" version="0.01">
<description>diffusion maps for large-scale single-cell data in R</description>

<command interpreter="python">
        destiny_Wrapper.py --script_path "$runMe" --interpreter "Rscript" 
            --tool_name "destiny_Wrapper" --input_tab "$input1" --input_int "$input2" 
            #if $custom_input.use_custom_sigma == "true":
                --input_sigma "$custom_input.sigma" 
            #else
                --input_sigma 0 
            #end if
            --plot_pergene "$gene_input.plot_expression_pergene"
            #if $gene_input.plot_expression_pergene == "true":
                --input_gene "$gene_input.input_gene"
            #else
                --input_gene 0
            #end if
            --output_dir "$html_file.files_path" --output_tab "$tab_file" --output_tab2 "$tab_file2" --output_html "$html_file" --make_HTML "yes" 
</command>
<inputs>
    <param name="input1"  type="data" format="tabular" label="Select a suitable input file from your history"/> 
    <param name="input2"  type="text" label="Please input a number of cell-name index in column-name(separated '_')" value="1"/>
    <param name="job_name" type="text" label="Supply a name for the outputs to remind you what they contain" value="destiny_Wrapper"/> 
    <conditional name="custom_input">    
        <param name="use_custom_sigma" type="select" label="Using custom value of sigma(gaussian kernel widths)">
            <option value="true">Yes</option>
            <option value="false">No</option>
        </param>
        <when value="true">
            <param name="sigma" type="text" size="100" value="20" label="Using for m different gaussian kernel widths (sigma)."/>
        </when>
    </conditional>
    <conditional name="gene_input">    
        <param name="plot_expression_pergene" type="select" label="Plotting gradation of expression per selected gene">
            <option value="true">Yes</option>
            <option value="false">No</option>
        </param>
        <when value="true">
            <param name="input_gene" type="data" format="txt" label="Select a suitable input txt(comma-delimited) from your history"/>
        </when>
    </conditional>

</inputs>
<outputs>
  <data format="tabular" name="tab_file" label="${job_name} on ${on_string}_eigenvectors"/>
  <data format="tabular" name="tab_file2" label="${job_name} on ${on_string}_eigenvalues_and_variances"/>
  <data format="html" name="html_file" label="${job_name} on ${on_string}_output.html"/>
</outputs>
<configfiles>
<configfile name="runMe">
library("matrixStats")
library("stringr")
library("ggplot2")
library("reshape2")
options(rgl.useNULL=TRUE)
library("rgl")
library("edgeR")
library("destiny")

library("spatgraphs")
library("igraph")
library("RColorBrewer")
library("plotrix")
library("grid")
library("gridExtra")
library("lattice")
library(Mus.musculus)

cat("destiny_Wrapper Started......\n")
cat("\n")

ourargs = commandArgs(TRUE)
inf = ourargs[1]
cell_idx = ourargs[2]
sigma = as.integer(ourargs[3])
plot_pergene = ourargs[4]
inf_gene = ourargs[5]
outf = ourargs[6]
outf2 = ourargs[7]
cat("input file name:");inf
cat("cell name index: ");cell_idx
cell_idx = as.integer(cell_idx)
cat("input sigma:");sigma
cat("plot_pergene:");plot_pergene
cat("input gene:");inf_gene
cat("output file name(1):");outf
cat("output file name(2):");outf2
cat("\n")

outp = read.table(inf, sep="\t", comment.char = "", header=T)
rownames(outp) = outp[,1]
outp = outp[, -1]
outp = outp[, order(names(outp))]

#remove no expression genes
out_matrix = data.matrix(outp)
sum(rowVars(out_matrix) == 1)
idx = rowVars(out_matrix) == 0
out_matrix = out_matrix[!idx,]

#remove outliner cells
sum(colVars(out_matrix)&lt;1)
idx = colVars(out_matrix)&lt;1
out_matrix = out_matrix[,!idx]

out_matrix = apply(out_matrix,2,function(x){ifelse(is.nan(x), 0, x)})
ncol(out_matrix);nrow(out_matrix)

dset = data.frame(out_matrix, stringsAsFactors = FALSE)

celltype = as.data.frame(str_split(colnames(dset), "_"))
celltype = factor(sort(unname(unlist(celltype[cell_idx,]))))
celltype

### Normalization &amp; log10(+1) for density
d.dge = DGEList(counts=out_matrix, group=celltype)
d = calcNormFactors(d.dge)

tmmScaleFactors = d.dge\$samples\$lib.size * d\$samples\$norm.factors
tmmExp = round(t(t(d\$counts)/tmmScaleFactors) * mean(tmmScaleFactors))
counts_tmm = log10(tmmExp + 1)
sum(is.nan(counts_tmm))
d_data = t(counts_tmm)
d_data = d_data[rowSds(d_data) &gt; 0,]
nrow(d_data);ncol(d_data)

### diffusion map ################################################
d_df = data.frame(d_data, stringsAsFactors = FALSE)
d_df\$Cell = celltype
d_ct = as.ExpressionSet(d_df, annotation.cols = !sapply(d_df,is.double))

if(sigma == 0){
    sigmas = find.sigmas(d_ct, verbose = FALSE)
    sigma = optimal.sigma(sigmas)
}

d_dif = DiffusionMap(d_ct, sigma, density.norm = TRUE)

### diffusion map Plot ################################################
#png("eigenvalues.png", width=800, height=600)
#print(plot(eigenvalues(d_dif), pch = 20, xlab = 'Diffusion component (DC)', ylab = 'Eigenvalue'))
#dev.off()

# Multiple plot function
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  
  # Make a list from the ... arguments and plotlist
  plots = c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout = matrix(seq(1, cols * ceiling(numPlots/cols)), ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx = as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx\$row,
                                      layout.pos.col = matchidx\$col))
    }
  }
}

#3D plot
plot3d(eigenvectors(d_dif)[, 1:3], col =as.integer(celltype))
text3d(eigenvectors(d_dif)[, 1:3], text=as.vector(celltype), cex=1.0, adj=1, scale=0.1)
writeWebGL(dir=getwd(), snapshot=FALSE, width=600, height=600)

# Eigenvectors
write.table(eigenvectors(d_dif), outf, quote=FALSE, sep="\t")

# Eigenvalues
eig = eigenvalues(d_dif)
# Variances in percentage
variance = eig*100/sum(eig)
# Cumulative variances
cumvar = cumsum(variance)
length(eig)
eig_dataf = data.frame(row.names=sprintf("DC%d", 1:length(eig)),
                        eigenvalues=eig, variance=round(variance,digits=3), cumvariance = cumvar)
write.table(eig_dataf, outf2, quote=FALSE, sep="\t")

#ggplot2 on Celltype
pdf("plot_celltype_pattern.pdf",paper="a4",width=9.5,height=7,pointsize=6)

plot_d1d2 = qplot(DC1, DC2, data = d_dif, colour = celltype, alpha=I(0.5), size =I(4)) + theme(legend.title=element_blank()) + ggtitle(paste("DC1DC2/sigma:",as.character(round(sigma)), sep=" "))
#ggsave(file="plot_DC1DC2.png", plot=plot_d1d2, dpi=100, width=8.5, height=8)

plot_d2d3 = qplot(DC2, DC3, data = d_dif, colour = celltype, alpha=I(0.5), size =I(4)) + theme(legend.title=element_blank()) + ggtitle(paste("DC2DC3/sigma:",as.character(round(sigma)), sep=" "))
#ggsave(file="plot_DC2DC3.png", plot=plot_d2d3, dpi=100, width=8.5, height=8)

plot_d1d3 = qplot(DC1, DC3, data = d_dif, colour = celltype, alpha=I(0.5), size =I(4)) + theme(legend.title=element_blank()) + ggtitle(paste("DC1DC3/sigma:",as.character(round(sigma)), sep=" "))
#ggsave(file="plot_DC1DC3.png", plot=plot_d1d3, dpi=100, width=8.5, height=8)

multiplot(plotlist = list(plot_d1d2,plot_d2d3,plot_d1d3), cols=2)

###########################################################################
### Create MST
###########################################################################
x = eigenvectors(d_dif)[, 1]
y = eigenvectors(d_dif)[, 2]
z = eigenvectors(d_dif)[, 3]
n = length(eigenvectors(d_dif)[,1])
w = c(0, max(eigenvectors(d_dif)))

pp2d_DC1DC2=list(
  x = x, y = y,
  n = n,
  window = list(x = w, y = w)
)

pp2d_DC2DC3=list(
  x = y, y = z,
  n = n,
  window = list(x = w, y = w)
)

pp2d_DC1DC3=list(
  x = x, y = z,
  n = n,
  window = list(x = w, y = w)
)

sg_DC1DC2 = spatgraph(pp2d_DC1DC2, "MST")
sg_DC2DC3 = spatgraph(pp2d_DC2DC3, "MST")
sg_DC1DC3 = spatgraph(pp2d_DC1DC3, "MST")

ig_DC1DC2 = sg2igraph(sg_DC1DC2)
ig_DC2DC3 = sg2igraph(sg_DC2DC3)
ig_DC1DC3 = sg2igraph(sg_DC1DC3)

#color palette
exp_cols = colorRampPalette(colors = brewer.pal(9,"Dark2"))

par(mfrow=c(2,2))
#png("MST plot (Celltype) DC1DC2.png", width=800, height=800)
plot(ig_DC1DC2,
    vertex.color=exp_cols(255)[cut(as.integer(celltype),breaks=254)], 
    vertex.label=c(as.character(celltype)), 
    vertex.label.color="gray80",
    vertex.label.font=1,
    vertex.label.cex=0.5,
    vertex.frame.color="white",
    vertex.size = 6,
    layout=layout.kamada.kawai) 
title("MST(Celltype) DC1DC2", cex.main=1)
#dev.off()

#png("MST plot (Celltype) DC2DC3.png", width=800, height=800)
plot(ig_DC2DC3,
     vertex.color=exp_cols(255)[cut(as.integer(celltype),breaks=254)], 
     vertex.label=c(as.character(celltype)), 
     vertex.label.color="gray80",
     vertex.label.font=1,
     vertex.label.cex=0.5,
     vertex.frame.color="white",
     vertex.size = 6,
     layout=layout.kamada.kawai) 
title("MST(Celltype) DC2DC3", cex.main=1)
#dev.off()

#png("MST plot (Celltype) DC1DC3.png", width=800, height=800)
plot(ig_DC1DC3,
     vertex.color=exp_cols(255)[cut(as.integer(celltype),breaks=254)], 
     vertex.label=c(as.character(celltype)), 
     vertex.label.color="gray80",
     vertex.label.font=1,
     vertex.label.cex=0.5,
     vertex.frame.color="white",
     vertex.size = 6,
     layout=layout.kamada.kawai) 
title("MST(Celltype) DC1DC3", cex.main=1)
dev.off()

### expression count gradation on plot
if(plot_pergene == "true"){

keytype = ifelse(grepl("ENSMUST", rownames(d_ct)[1]),"ENSEMBLTRANS","REFSEQ")
print(keytype)
mm = Mus.musculus
mm_ant_ref = AnnotationDbi::select(mm, keys = keys(mm, keytype=keytype), keytype =keytype, columns = c(keytype, "SYMBOL"))
names(mm_ant_ref)[1] = paste("REFSEQ")
mm_ant_ref = subset(mm_ant_ref, select=c("REFSEQ", "SYMBOL"))
mm_ant_ref = mm_ant_ref[!duplicated(mm_ant_ref\$REFSEQ),]
head(mm_ant_ref);nrow(mm_ant_ref)

draw_ggplot = function(idlist, gp){
  plist = list()
  for (i in 1:length(idlist)) {
    gene = mm_ant_ref[grep(idlist[[i]], mm_ant_ref\$REFSEQ), ][[2]]
    genename = paste(gene, idlist[[i]], sep = "_")
    g = gp +
      geom_text(alpha = 0.8, size = 2, colour = "black") +
      ggtitle(genename)
    plist[[i]] = g
  }
  plist
}

# create id list
gene_list = read.table(inf_gene, sep=",", comment.char = "", header=F, stringsAsFactors = FALSE)
idlist = gene_list[1,]

gp = ggplot(data=d_dif, aes(x = DC1, y = DC2, label = celltype))
plist = draw_ggplot(idlist, gp);length(plist)
gp2 = ggplot(data = d_dif, aes(x = DC2, y = DC3, label = celltype))
plist2 = draw_ggplot(idlist, gp2);length(plist2)
gp3 = ggplot(data = d_dif, aes(x = DC1, y = DC3, label = celltype))
plist3 = draw_ggplot(idlist, gp3);length(plist3)
  
#color palette
exp_cols = colorRampPalette(colors = brewer.pal(9,"OrRd"))

exp_MST = function(gene,geneid,igobj){
  expression = tmmExp[rownames(tmmExp) == geneid,]
  genename = paste(gene,geneid,sep = "_")
  par(mar=c(2, 0, 2, 0))
  pp = plot(igobj,
            vertex.color=exp_cols(255)[cut(expression,breaks=254)],
            vertex.label=c(as.character(celltype)),
            vertex.label.color="gray70",
            vertex.label.font=1,
            vertex.label.cex=0.5,
            vertex.frame.color="white",
            vertex.size = 6,
            layout=layout.kamada.kawai)
  title(genename, cex.main=1)
  col.labels = c("Low Exp", "High Exp")
  color.legend(-0.5,-1.2,0.5,-1.1, legend=col.labels, rect.col=brewer.pal(9,"OrRd"))
}

pdf(paste("plot_expression_pattern.pdf",sep="_"),paper="a4",width=9.5,height=7,pointsize=6)
cols = 2
numplot = 3
cOrange = "#f39800";cLightBlue = "#0068b7"

for (i in 1:length(idlist)){
  par(mfrow=c(1,1))
  gene = mm_ant_ref[grep(idlist[[i]], mm_ant_ref\$REFSEQ), ][[2]]
  genename = paste(gene, idlist[[i]], sep = "_")
  
  val = d_df[, grepl(idlist[[i]] , names(d_df))] 
  if (length(val) == 0) next

  cell_i = data.frame(val = d_df[, grepl(idlist[[i]] , names(d_df))], type = d_df\$Cell, row.names=rownames(d_df), stringsAsFactors = FALSE)
  d = densityplot(~val, data=cell_i, groups = type, plot.points = FALSE, ref = TRUE, auto.key = TRUE, xlab="expression(log10+1)", main=genename, xlim=c(0,5), ylim=c(0,5))
  print(d)
  
  layout = matrix(seq(1, cols * ceiling(numplot/cols)), ncol = cols, nrow = ceiling(numplot/cols))
  grid.newpage()
  pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
  
  exp = tmmExp[rownames(tmmExp) == idlist[[i]], ]
  
  # Get the i,j matrix positions of the regions that contain this subplot
  matchidx = as.data.frame(which(layout == 1, arr.ind = TRUE))
  plt = plist[[i]] +
    geom_point(alpha=.5, size = 6, aes(colour = exp)) +
    scale_color_gradient(low=cLightBlue, high=cOrange) +
    guides(color = guide_colorbar())
  print(plt, vp = viewport(layout.pos.row = matchidx\$row, layout.pos.col = matchidx\$col))
  
  matchidx = as.data.frame(which(layout == 2, arr.ind = TRUE))
  plt2 = plist2[[i]] +
    geom_point(alpha=.5, size = 7, aes(colour = exp)) +
    scale_color_gradient(low=cLightBlue, high=cOrange) +
    guides(color = guide_colorbar())
  print(plt2, vp = viewport(layout.pos.row = matchidx\$row, layout.pos.col = matchidx\$col))
  
  matchidx = as.data.frame(which(layout == 3, arr.ind = TRUE))
  plt3 = plist3[[i]] +
    geom_point(alpha=.5, size = 7, aes(colour = exp)) +
    scale_color_gradient(low=cLightBlue, high=cOrange) +
    guides(color = guide_colorbar())
    print(plt3, vp = viewport(layout.pos.row = matchidx\$row, layout.pos.col = matchidx\$col))
  #dev.off()
  
  #png(paste("plot_exp_mst",idlist[[i]],".png",sep="_"), width=1600, height=600)
  par(mfrow=c(2,2))
  exp_MST(gene,idlist[[i]],ig_DC1DC2)
  exp_MST(gene,idlist[[i]],ig_DC2DC3)
  exp_MST(gene,idlist[[i]],ig_DC1DC3)
  #dev.off()
}
dev.off()
}

</configfile>
</configfiles>


        <tests>
        <test>
        <param name="input1" value="CreateDiffusionMapFromDestiny_test1_input.xls" ftype="tabular"/>
        <param name="job_name" value="test1"/>
        <param name="runMe" value="$runMe"/>
        <output name="tab_file" file="CreateDiffusionMapFromDestiny_test1_output.xls" ftype="tabular"/>
        </test>
        </tests>
        

<help>
destiny is an easy to use R package allowing for easy creation and plotting of diffusion maps. 

**Attribution**
This Galaxy tool was created by admin@galaxy.org at 19/08/2015 09:31:41
using the Galaxy Tool Factory.

See https://bitbucket.org/fubar/galaxytoolfactory for details of that project
Please cite: Creating re-usable tools from scripts: The Galaxy Tool Factory. Ross Lazarus; Antony Kaspi; Mark Ziemann; The Galaxy Team. 
Bioinformatics 2012; doi: 10.1093/bioinformatics/bts573


</help>
<citations>
    
    <citation type="doi">10.1093/bioinformatics/bts573</citation>
</citations>
</tool>
